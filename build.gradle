import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'application'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

group = 'com.gjvandersloot'

application {
    mainClass = 'com.gjvandersloot.Main'
    applicationName = 'SimpleKeyVault'
}

repositories {
    mavenCentral()
}

javafx {
    version = '21.0.3'
    modules = ['javafx.controls', 'javafx.fxml']
}

def tag = 'git describe --tags --abbrev=0'.execute().text.trim()
version = tag ? tag.replaceFirst("^v", "") : '1.0.0'
println "Building version: ${version}"

shadowJar {
    archiveClassifier.set("all")
    mergeServiceFiles()
}

var buildDirectory = getLayout().getBuildDirectory().get().asFile.path

tasks.register('packageApp', Exec) {
    dependsOn(shadowJar)

    def os = OperatingSystem.current()
    def isWindows = os.isWindows()
    def isMac = os.isMacOsX()
    def isLinux = os.isLinux()

    def iconPath = isWindows ? "src/main/resources/icon/icon.ico" :
            isMac     ? "src/main/resources/icon/icon.icns" :
                    "src/main/resources/icon/icon.png"

    def mainOptions = ['--input', "${buildDirectory}/libs",
                       '--main-jar', "${application.applicationName}-${version}-all.jar",
                       '--runtime-image', Jvm.current().javaHome.absolutePath,
                       '--dest', "$buildDirectory/out",
                       '--name', application.applicationName,
                       '--icon', iconPath,
                       '--app-version', version]

    def platformOptions = []
    if (isWindows) {
        platformOptions += [
//                '--win-console',
                '--win-menu',
                '--win-dir-chooser',
                '--type', 'msi'
        ]
    } else if (isMac) {
        platformOptions += [
                '--type', 'dmg'
        ]
    } else if (isLinux) {
        platformOptions += [
                '--type', 'deb',
                '--linux-shortcut' // optionally add
        ]
    }
    def args = ['jpackage'] + mainOptions + platformOptions
    commandLine args as List<String>
}


dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-core:2.19.1'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Azure SDK
    implementation 'com.azure:azure-identity:1.16.2'
    implementation 'com.azure:azure-security-keyvault-secrets:4.10.0'
    implementation 'com.azure:azure-security-keyvault-certificates:4.6.2'
    implementation 'com.azure:azure-security-keyvault-keys:4.6.2'
    implementation 'com.azure.resourcemanager:azure-resourcemanager:2.52.0'
    implementation 'com.azure.resourcemanager:azure-resourcemanager-resources:2.32.0'
    implementation 'com.azure.resourcemanager:azure-resourcemanager-keyvault:2.32.0'
    implementation 'com.microsoft.azure:msal4j:1.21.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    testCompileOnly 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'
}

tasks.test {
    useJUnitPlatform()
}