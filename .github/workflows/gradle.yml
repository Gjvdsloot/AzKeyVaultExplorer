name: Build and Release Installers

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.1)'
        required: false
        type: string
  push:
    tags:
      - 'v*'     # e.g., v1.2.3

jobs:
  build-msi:
    runs-on: windows-latest
    outputs:
      msi_path: ${{ steps.find-msi.outputs.msi_path }}
      jar_path: ${{ steps.find-jar.outputs.jar_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Verify Gradle
        run: ./gradlew --version

      - name: Package MSI
        run: ./gradlew packageApp

      - name: Find MSI
        id: find-msi
        run: |
          $msi = Get-ChildItem -Recurse -Filter "*.msi" | Select-Object -First 1
          echo "msi_path=$($msi.FullName -replace '\\', '/')" >> $env:GITHUB_OUTPUT

      - name: Find fat JAR
        id: find-jar
        run: |
          $jar = Get-ChildItem -Path "$env:GITHUB_WORKSPACE\build\libs" -Filter "*.jar" | Where-Object { $_.Name -notlike "*-plain*" } | Select-Object -First 1
          if ($null -eq $jar) {
            Write-Error "No jar found."
            exit 1
          }
          echo "jar_path=$($jar.FullName -replace '\\', '/')" >> $env:GITHUB_OUTPUT

      - name: Upload MSI
        uses: actions/upload-artifact@v4
        with:
          name: msi
          path: build/out/*.msi

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: jar
          path: build/libs/*-all.jar

  build-dmg:
    runs-on: macos-latest
    outputs:
      dmg_path: ${{ steps.find-dmg.outputs.dmg_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Verify Gradle
        run: ./gradlew --version

      - name: Package DMG
        run: ./gradlew packageApp

      - name: Find DMG
        id: find-dmg
        run: |
          DMG_PATH=$(find build/out -name "*.dmg" | head -n 1)
          echo "dmg_path=$DMG_PATH" >> $GITHUB_OUTPUT

      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: dmg
          path: build/out/*.dmg

  build-deb:
    runs-on: ubuntu-latest
    outputs:
      deb_path: ${{ steps.find-deb.outputs.deb_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install jpackage dependencies
        run: sudo apt update && sudo apt install -y fakeroot libfuse2

      - name: Verify Gradle
        run: ./gradlew --version

      - name: Package DEB
        run: ./gradlew packageApp

      - name: Find DEB
        id: find-deb
        run: |
          DEB_PATH=$(find build/out -name "*.deb" | head -n 1)
          echo "deb_path=$DEB_PATH" >> $GITHUB_OUTPUT

      - name: Upload DEB
        uses: actions/upload-artifact@v4
        with:
          name: deb
          path: build/out/*.deb

  release:
    runs-on: ubuntu-latest
    needs: [ build-msi, build-dmg, build-deb ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download MSI
        uses: actions/download-artifact@v4
        with:
          name: msi

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: jar

      - name: Download DMG
        uses: actions/download-artifact@v4
        with:
          name: dmg

      - name: Download DEB
        uses: actions/download-artifact@v4
        with:
          name: deb

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_tag || github.ref_name }}
          files: |
            *.msi
            *.jar
            *.deb
            *.dmg
